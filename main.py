from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes, CallbackContext
import telegram.error

async def button_handler(update: Update, context):
    query = update.callback_query
    try:
        await query.answer()
    except telegram.error.BadRequest:
        pass

# üîí –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∑–∞–º–µ–Ω–∏ ID –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ)
ALLOWED_USERS = {209309861}  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏ ID

# üîê –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
async def check_access(update: Update) -> bool:
    user_id = update.effective_user.id
    if user_id not in ALLOWED_USERS:
        if update.message:
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        elif update.callback_query:
            await update.callback_query.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return False
    return True  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True

# üöÄ –§—É–Ω–∫—Ü–∏—è /start –∏ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞—Ö
async def start(update: Update, context: CallbackContext):
    if update.message is None or update.message.text is None:  # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞, –≤—ã—Ö–æ–¥–∏–º
        return

    text = update.message.text.lower()  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º text —Å—Ä–∞–∑—É
    trigger_words = ["–ø—Ä–∏–≤–µ—Ç", "hi", "salut", "–Ω–∞—á–∞—Ç—å", "—Å—Ç–∞—Ä—Ç"]

    # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç: {text}")

    if any(word in text.split() for word in trigger_words) or text.startswith("/"):
        if not await check_access(update):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
            return  # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç, –≤—ã—Ö–æ–¥–∏–º

        await update.message.reply_text("‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ—Å—Ç—É–ø–µ
        keyboard = [[InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤", callback_data='dispatchers')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("üöõ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
        return  # –í—ã—Ö–æ–¥ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é

        # üöõ –ï—Å–ª–∏ —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –∏—â–µ–º –≤–æ–¥–∏—Ç–µ–ª—è
    driver_name = text
    drivers_info_lower = {key.lower(): value for key, value in drivers_info.items()}
    info = drivers_info_lower.get(driver_name)

    if info:
        await update.message.reply_text(info, parse_mode='HTML')

# üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–ø—Ä–∏–º–µ—Ä)
def main_menu():
    keyboard = [[InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π", callback_data='drivers')]]
    return InlineKeyboardMarkup(keyboard)

# –î–∞–Ω–Ω—ã–µ (–ø–æ–∫–∞ –≤—Ä—É—á–Ω—É—é)
dispatchers = {
    "üöõ –î–∏—Å–ø–µ—Ç—á–µ—Ä David Miller": ["–í–æ–¥–∏—Ç–µ–ª—å Bivol Igor", "–í–æ–¥–∏—Ç–µ–ª—å Cojocaru Victor", "–í–æ–¥–∏—Ç–µ–ª—å Tupitcyn Anton","–í–æ–¥–∏—Ç–µ–ª—å Joseph Garry","–í–æ–¥–∏—Ç–µ–ª—å Feriani Mohamed","–í–æ–¥–∏—Ç–µ–ª—å Yaser Ahmad",
                                 "–í–æ–¥–∏—Ç–µ–ª—å Starohcotelnii Alexandr"]

}

drivers_info = {
    "–í–æ–¥–∏—Ç–µ–ª—å Bivol Igor": (
        "üìå Driver Name: Bivol Igor \n"
        "üìû Phone Number: 704-454-8656 \n"
        "üöõ Truck Number: 02"
        "üöÇ Trailer Number: 165146 \n"
        "üîë VIN:245354353 \n" 
        "‚öìTrailer Type: R \n"
        "‚öñ Weight:44.000 \n"
        "üÖ± Owner: da"
    ),
    "–í–æ–¥–∏—Ç–µ–ª—å James": (
        "üìå Driver Name: James \n"
        "üìû Phone Number: 437439743 \n"
        "üöõ Truck Number:34343 \n"
        "üöÇ Trailer Number:3434342 \n"
        "üîë VIN:989774208320 \n"
        "‚öìRamps: da \n"
        "‚öñ Weight: 3232 \n"
        "üÖ± Owner: da"
    ),
}
# URL –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ —Ñ–∞–π–ª–æ–≤
drivers_files = {
    "–í–æ–¥–∏—Ç–µ–ª—å Chris": {
        "photo": "https://www.google.com/",
        "files": "https://www.google.com/"
    },
        "–í–æ–¥–∏—Ç–µ–ª—å James": {
        "photo": "https://www.google.com/",
        "files": "https://www.google.com/"
    },
}

async def show_dispatchers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    keyboard = [[InlineKeyboardButton(name, callback_data=name)] for name in dispatchers.keys()]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='start')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.edit_text("üë• –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞:", reply_markup=reply_markup)


async def show_drivers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    selected_dispatcher = query.data
    keyboard = [[InlineKeyboardButton(name, callback_data=name)] for name in dispatchers[selected_dispatcher]]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='dispatchers')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.edit_text(f"üöõ –í–æ–¥–∏—Ç–µ–ª–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ {selected_dispatcher}:", reply_markup=reply_markup)

async def show_driver_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    selected_driver = query.data
    keyboard = [
        [InlineKeyboardButton("üì∏ –§–æ—Ç–æ", url=drivers_files[selected_driver]["photo"]),
         InlineKeyboardButton("üìÇ –§–∞–π–ª—ã", url=drivers_files[selected_driver]["files"])],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='dispatchers')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.edit_text(f"{drivers_info[selected_driver]}", reply_markup=reply_markup)


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º callback_data
    if query.data == 'start':
        await start(update, context)
    elif query.data == 'dispatchers':
        await show_dispatchers(update, context)
    elif query.data in dispatchers:
        await show_drivers(update, context)
    elif query.data in drivers_info:
        await show_driver_info(update, context)
    elif query.data.startswith("photo_"):
        selected_driver = query.data.split("_")[1]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
        if selected_driver in drivers_files and "photo" in drivers_files[selected_driver]:
            photo_path = drivers_files[selected_driver]["photo"]
            try:
                await query.message.reply_photo(photo=open(photo_path, 'rb'))
            except Exception as e:
                await query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
        else:
            await query.message.reply_text("–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è.")
    elif query.data.startswith("files_"):
        selected_driver = query.data.split("_")[1]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
        if selected_driver in drivers_files and "document" in drivers_files[selected_driver]:
            file_path = drivers_files[selected_driver]["document"]
            try:
                await query.message.reply_document(document=open(file_path, 'rb'))
            except Exception as e:
                await query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        else:
            await query.message.reply_text("–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è.")


# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Application.builder().token("8101558494:AAFNh4jqCdeQFgCihkOJEpLfhJ1GE8CSupg").build()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
app.add_handler(CallbackQueryHandler(show_dispatchers, pattern="^dispatchers$"))
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(button_handler))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
